if filereadable(expand("~/.at_google"))
  source ~/.dotfiles/vim/google.vim
else
  set ts=4 sts=4 sw=4 expandtab
endif

" Speed up CtrlP with ag
let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
    \ --ignore .git
    \ --ignore .svn
    \ --ignore .hg
    \ --ignore .DS_Store
    \ --ignore "**/*.pyc"
    \ --ignore .git5_specs
    \ --ignore review
    \ -g ""'

if has('autocmd')

  " turn filetype off per the pathogen instructions at
  " http://www.vim.org/scripts/script.php?script_id=2332
  filetype off

  call pathogen#runtime_append_all_bundles()

  " turn filetype back on after calling pathogen
  filetype on
  filetype plugin on

  " set filetypes for a given extension
  au BufRead,BufNewFile *.R set ft=R
  au BufRead,BufNewFile *.snippets set ft=snippet

  " local settings for specific filetypes
  au FileType make,snippet setlocal ts=8 sts=8 sw=8 noexpandtab
  au FileType python setlocal ts=4 sts=4 sw=4

  " compile coffeescripts on save
  au BufWritePost,FileWritePost *.coffee :silent !coffee -c %

  " Go to last viewed tab
  let g:lasttab = 1
  nmap T :exe "tabn ".g:lasttab<CR>
  au TabLeave * let g:lasttab = tabpagenr()

  let g:gitgutter_sign_added='++'
  let g:gitgutter_sign_modified='~~'
  let g:gitgutter_sign_removed='__'
  let g:gitgutter_sign_removed_first_line='‾‾'
  let g:gitgutter_sign_modified_removed='__'
endif

" set the leader key to the backslash
let mapleader='\'

" source custom functions
so ~/.dotfiles/vim/functions

" map ,w to StripTrailingWhitespaces()
nnoremap <silent> <leader>w :call StripTrailingWhitespaces()<cr>

" toggle invisibles with ,i
nmap <leader>i :set list!<cr>

" toggle relative line numbering with ,r
nmap <leader>r :set rnu!<cr>

" toggle cursorline highlighting
nmap <leader>c :set cursorline!<cr>

" toggle spellcheck with ,s
nmap <leader>s :set spell!<cr>

" toggle previous buffer with ,,
nmap <leader><leader> <c-^>

" clear search highlighting
nmap <ret> :nohlsearch<cr>

" open files in the same directory as the current file
cnoremap %% <c-r>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

" open current buffer in new tab
noremap <leader>n :vs<CR><C-W>T

" move current buffer to new tab
noremap <leader>T <C-W>T

" opens CtrlP in a new tab
noremap <leader><C-P> :tabnew<CR>:CtrlP<CR>

" show highlight group information
map <C-F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
    \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" a visual reminder of an 80-character line
if exists('+colorcolumn')
  set colorcolumn=81
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" don't autofold, but still allow manual folding
set foldlevel=100

set t_Co=16
set cursorline
set autoindent
set smartindent
set hidden
set hlsearch
set list
set number
set ruler
set smarttab
set showcmd
set wildmenu
set ignorecase
set smartcase
set scrolloff=5
set backspace=indent,eol,start " backspace over everything
set splitbelow
set splitright
set updatetime=1200

" mimic TextMate's invisible characters
set listchars=tab:▸\ ,eol:¬
" hi NonText ctermfg=red


syntax enable
syntax on

"tab stuff
set switchbuf=usetab,newtab
set guitablabel=\[%N\]\ %t\ %M
nmap <leader>t :tabnew<CR>
nmap H :tabp<CR>
nmap L :tabn<CR>
nmap <C-H> <C-W>h
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-L> <C-W>l

source ~/.dotfiles/vim/tabline.vim
source ~/.dotfiles/vim/statusline.vim
source ~/.dotfiles/vim/colors.vim

augroup BgHighlight
  autocmd!
  autocmd WinEnter * set colorcolumn=81
  autocmd WinEnter * set cursorline
  autocmd WinLeave * set colorcolumn=0
  autocmd WinLeave * set nocursorline
augroup END
