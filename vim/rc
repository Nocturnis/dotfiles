if filereadable(expand("~/.at_google"))
  source ~/.dotfiles/vim/google.vim
else
  set ts=4 sts=4 sw=4 expandtab
endif

" Speed up CtrlP with ag
let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
    \ --ignore .git
    \ --ignore .svn
    \ --ignore .hg
    \ --ignore .DS_Store
    \ --ignore "**/*.pyc"
    \ --ignore .git5_specs
    \ --ignore review
    \ -g ""'

if has('autocmd')

  " turn filetype off per the pathogen instructions at
  " http://www.vim.org/scripts/script.php?script_id=2332
  filetype off

  call pathogen#runtime_append_all_bundles()

  " turn filetype back on after calling pathogen
  filetype on
  filetype plugin on

  " set filetypes for a given extension
  au BufRead,BufNewFile *.R set ft=R
  au BufRead,BufNewFile *.snippets set ft=snippet

  " local settings for specific filetypes
  au FileType make,snippet setlocal ts=8 sts=8 sw=8 noexpandtab
  au FileType python setlocal ts=4 sts=4 sw=4

  " compile coffeescripts on save
  au BufWritePost,FileWritePost *.coffee :silent !coffee -c %

  " Go to last viewed tab
  let g:lasttab = 1
  nmap T :exe "tabn ".g:lasttab<CR>
  au TabLeave * let g:lasttab = tabpagenr()

  let g:gitgutter_sign_added='++'
  let g:gitgutter_sign_modified='~~'
  let g:gitgutter_sign_removed='__'
  let g:gitgutter_sign_removed_first_line='‾‾'
  let g:gitgutter_sign_modified_removed='__'
endif

" set the leader key to the backslash
let mapleader='\'

" source custom functions
so ~/.dotfiles/vim/functions

" map ,w to StripTrailingWhitespaces()
nnoremap <silent> <leader>w :call StripTrailingWhitespaces()<cr>

" toggle invisibles with ,i
nmap <leader>i :set list!<cr>

" toggle relative line numbering with ,r
nmap <leader>r :set rnu!<cr>

" toggle cursorline highlighting
nmap <leader>c :set cursorline!<cr>

" toggle spellcheck with ,s
nmap <leader>s :set spell!<cr>

" toggle previous buffer with ,,
nmap <leader><leader> <c-^>

" clear search highlighting
nmap <ret> :nohlsearch<cr>

" open files in the same directory as the current file
cnoremap %% <c-r>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

" open current buffer in new tab
noremap <leader>n :vs<CR><C-W>T

" move current buffer to new tab
noremap <leader>T <C-W>T

" opens CtrlP in a new tab
noremap <leader><C-P> :tabnew<CR>:CtrlP<CR>

" show highlight group information
map <C-F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
    \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" a visual reminder of an 80-character line
if exists('+colorcolumn')
  set colorcolumn=81
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" don't autofold, but still allow manual folding
set foldlevel=100

set t_Co=16
set cursorline
set autoindent
set smartindent
set hidden
set hlsearch
set list
set number
set ruler
set smarttab
set showcmd
set wildmenu
set ignorecase
set smartcase
set scrolloff=5
set backspace=indent,eol,start " backspace over everything
set splitbelow
set splitright
set updatetime=1200

" mimic TextMate's invisible characters
set listchars=tab:▸\ ,eol:¬
" hi NonText ctermfg=red

" show current file (filetype) on the left and 
" [cursor position line,colum] [number of lines] on the right
function! StatusLineMode(mode)
  let cmode=mode()
  if cmode == 'v' || cmode == 'V'
    highlight StatusLineMode ctermfg=Gray ctermbg=Blue
    return 'Visual'
  elseif cmode == 'R'
    highlight StatusLineMode ctermfg=Black ctermbg=Yellow
    return 'Replace'
  elseif cmode == 'i'
    highlight StatusLineMode ctermfg=Black ctermbg=LightGreen
    return 'Insert'
  else
    highlight StatusLineMode ctermfg=DarkGray ctermbg=Gray
    return 'Normal'
  end
endfunction
function! Status(i)
  let s = ''
  if winnr() == a:i
    let s .= '%#StatusLineMode# %{StatusLineMode(v:insertmode)} %#StatusLine#'
  else
    let s .= '%#StatusLineNC#'
  end
  let s .= ' %F%m%r%h%w '
  if winnr() == a:i
    let s .= '%=%#StatusLinePosition# col %v, line %l / %L '
  end
  return s
endfunction
function! s:RefreshStatus()
  for nr in range(1, winnr('$'))
    call setwinvar(nr, '&statusline', '%!Status(' . nr . ')')
  endfor
endfunction
augroup status
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter,InsertEnter,InsertLeave * call <SID>RefreshStatus()
augroup END

" show the status line
set laststatus=2

syntax enable
syntax on

"tab stuff
set switchbuf=usetab,newtab
set guitablabel=\[%N\]\ %t\ %M
nmap <leader>t :tabnew<CR>
nmap H :tabp<CR>
nmap L :tabn<CR>
nmap <C-H> <C-W>h
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-L> <C-W>l
function! Tabline()
  let s = ''
  for i in range(tabpagenr('$'))
    let tab = i + 1
    let winnr = tabpagewinnr(tab)
    let buflist = tabpagebuflist(tab)
    let buftitles = []
    for j in range(len(buflist))
      let bufnr = buflist[j]
      let bufname = fnamemodify(bufname(buflist[j]), ':t')
      if bufname == ''
        let bufname = '[No Name]'
      endif
      let bufmodified = getbufvar(bufnr, "&mod")
      let buftitle = bufname
      if bufmodified
        let buftitle .= '*'
      endif
      call add(buftitles, buftitle)
    endfor
    let tabname = join(buftitles, ', ')

    let s .= '%' . tab . 'T'
    let s .= (tab == tabpagenr() ? '%#TabLineNumSel#' : '%#TabLineNum#')
    let s .= ' ' . tab
    let s .= (tab == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#')
    let s .= ' '
    let s .= tabname

    let s .= ' %#TabLineFill# '
  endfor

  let s .= '%#TabLineFill#'
  return s
endfunction
set tabline=%!Tabline()

" coloring
highlight TabLineFill   ctermfg=Black     ctermbg=Black     cterm=None
highlight TabLine       ctermfg=DarkGray  ctermbg=Black     cterm=None
highlight TabLineNum    ctermfg=Yellow    ctermbg=Black     cterm=None
highlight TabLineSel    ctermfg=White     ctermbg=None      cterm=None
highlight TabLineNumSel ctermfg=LightBlue ctermbg=None      cterm=None

highlight LineNr        ctermfg=DarkGray  ctermbg=None
highlight CursorLine                      ctermbg=Black     cterm=None
highlight CursorLineNr  ctermfg=Gray      ctermbg=None
highlight ColorColumn                     ctermbg=Black
highlight NonText       ctermfg=Black
highlight SpecialKey    ctermfg=Black
highlight SignColumn                      ctermbg=None      cterm=None
highlight GitGutterAdd ctermfg=DarkGreen ctermbg=DarkGreen cterm=None
highlight GitGutterChange ctermfg=Yellow ctermbg=Yellow cterm=None
highlight GitGutterDelete ctermfg=Red ctermbg=None cterm=None
highlight GitGutterChangeDelete ctermfg=Red ctermbg=Yellow cterm=None
highlight Search ctermfg=Black ctermbg=Yellow

highlight PreProc       ctermfg=DarkGray
highlight Constant       ctermfg=DarkMagenta
highlight Comment       ctermfg=DarkCyan
highlight javaCommentTitle ctermfg=Blue
highlight javaDocParam ctermfg=Blue
highlight javaString ctermfg=Magenta
highlight javaScriptStringS ctermfg=Magenta

highlight DiffAdd       ctermfg=Gray      ctermbg=DarkGreen   cterm=None
highlight DiffDelete    ctermfg=Gray      ctermbg=LightRed     cterm=None
highlight DiffChange    ctermfg=Gray      ctermbg=DarkYellow  cterm=None
highlight DiffText      ctermfg=Gray      ctermbg=DarkGreen   cterm=None

highlight trailingWhitespace ctermbg=Red
"highlight ExtraWhitespace ctermbg=Red
"match ExtraWhitespace /\s\+$/

highlight StatusLine ctermfg=DarkMagenta ctermbg=Gray
highlight StatusLineNC ctermfg=DarkGray ctermbg=Black cterm=None
highlight StatusLinePosition ctermfg=Gray ctermbg=DarkGray cterm=None
augroup BgHighlight
  autocmd!
  autocmd WinEnter * set colorcolumn=81
  autocmd WinEnter * set cursorline
  autocmd WinLeave * set colorcolumn=0
  autocmd WinLeave * set nocursorline
augroup END
